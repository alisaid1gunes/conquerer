version: '3.8'
services:
  db:
    image: postgres:latest
    cap_add:
      - SYS_NICE
    restart: always
    environment:
      - POSTGRES_DB=${DB_DATABASE}
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - ${DB_OUTSIDE_PORT}:${DB_PORT}
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-h", "localhost", "-U", "${DB_USERNAME}", "-d", "${DB_DATABASE}"]
      interval: 5s
      timeout: 50s
      retries: 3

  api:
    container_name: api
    build:
      context: ./
    image: api
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - ${PORT}:${PORT}
    command: sh -c "npm uninstall bcrypt && npm install bcrypt && npm run start"  # <--- Yeni komutlarÄ± ekledik.
    environment:
      DB_HOST: db
      DB_PORT: ${DB_PORT}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_DATABASE: ${DB_DATABASE}
      REDIS_HOST: redis
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_ACCESS_TOKEN_SECRET: ${JWT_ACCESS_TOKEN_SECRET}
      JWT_ACCESS_TOKEN_EXPIRES_IN: ${JWT_ACCESS_TOKEN_EXPIRES_IN}
      JWT_REFRESH_TOKEN_SECRET: ${JWT_REFRESH_TOKEN_SECRET}
      JWT_REFRESH_TOKEN_EXPIRES_IN: ${JWT_REFRESH_TOKEN_EXPIRES_IN}
    volumes:
      - ./:/src

  redis:
    image: redis:latest
    restart: always
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 10s
      retries: 3
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}

volumes:
  db_data:
    driver: local
  redis_data:
    driver: local
